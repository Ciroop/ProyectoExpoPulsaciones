{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ciroa\\\\OneDrive\\\\Escritorio\\\\Dibujo-React\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Canvas from './components/Canvas';\nimport Toolbar from './components/Toolbar';\nimport './index.css'; // Asegúrate de que este archivo se importe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState('#000000');\n  const [lineWidth, setLineWidth] = useState(10); // Grosor inicial\n  const [traces, setTraces] = useState([]); // Almacena los trazos dibujados\n  const [isDrawing, setIsDrawing] = useState(false); // Estado para verificar si se está dibujando\n  const [currentTrace, setCurrentTrace] = useState([]); // Almacena el trazo actual\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    loadBackground(); // Cargar la imagen de fondo\n    setTraces([]); // Limpiar el historial de trazos\n  };\n  const loadBackground = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.src = '/path/to/background/image.jpg'; // Ruta de la imagen de fondo\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n  };\n  const startDrawing = event => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const startX = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const startY = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineWidth = lineWidth;\n    context.strokeStyle = color;\n    context.lineCap = 'round';\n    context.beginPath();\n    context.moveTo(startX, startY); // Usa las coordenadas ajustadas\n\n    // Inicializa el trazo actual con su color y grosor\n    setCurrentTrace([{\n      x: startX,\n      y: startY,\n      color,\n      lineWidth\n    }]);\n  };\n  const draw = event => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const x = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const y = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    // Simula el efecto spray dibujando múltiples pequeños círculos\n    const numSprayDots = 10; // Número de puntos de spray iniciales\n    const fadeFactor = 0.05; // Factor de desvanecimiento\n\n    for (let i = 0; i < numSprayDots; i++) {\n      const offsetX = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en X\n      const offsetY = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en Y\n      const radius = lineWidth / 2 * (1 - i / numSprayDots); // Radio del círculo que se desvanece\n\n      context.beginPath();\n      context.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2); // Dibuja un círculo\n      context.fillStyle = color; // Establece el color de relleno\n      context.fill();\n    }\n\n    // Dibuja el trazo principal en la posición actual\n    context.lineTo(x, y);\n    context.stroke();\n\n    // Agrega el punto actual al trazo\n    setCurrentTrace(prev => [...prev, {\n      x,\n      y\n    }]);\n  };\n  const stopDrawing = () => {\n    if (isDrawing) {\n      const newTraces = [...traces, {\n        points: currentTrace,\n        color,\n        lineWidth\n      }]; // Agrega el trazo actual al historial\n      setTraces(newTraces); // Actualiza el historial\n      setCurrentTrace([]); // Resetea el trazo actual\n    }\n    setIsDrawing(false);\n  };\n  const undo = () => {\n    if (traces.length > 0) {\n      const newTraces = traces.slice(0, -1); // Elimina el último trazo de la pila\n      setTraces(newTraces); // Actualiza el historial\n      redrawCanvas(newTraces); // Redibuja el lienzo\n    }\n  };\n  const redrawCanvas = tracesToRedraw => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo\n    loadBackground(); // Vuelve a cargar la imagen de fondo\n\n    tracesToRedraw.forEach(({\n      points,\n      color,\n      lineWidth\n    }) => {\n      context.strokeStyle = color; // Establece el color del trazo\n      context.lineWidth = lineWidth; // Establece el grosor del trazo\n      context.beginPath(); // Comienza un nuevo trazo\n      context.moveTo(points[0].x, points[0].y); // Comienza desde el primer punto\n\n      // Redibuja cada trazo\n      points.forEach((point, index) => {\n        context.lineTo(point.x, point.y);\n        if (index % 2 === 0) {\n          // Dibuja spray cada ciertos puntos\n          const numSprayDots = 10; // Número de puntos de spray\n          for (let i = 0; i < numSprayDots; i++) {\n            const offsetX = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en X\n            const offsetY = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en Y\n            const radius = lineWidth / 2 * (1 - i / numSprayDots); // Radio del círculo que se desvanece\n\n            context.beginPath();\n            context.arc(point.x + offsetX, point.y + offsetY, radius, 0, Math.PI * 2); // Dibuja un círculo\n            context.fillStyle = color; // Establece el color de relleno\n            context.fill();\n          }\n        }\n      });\n      context.stroke(); // Finaliza el trazo\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      setColor: setColor,\n      setLineWidth: setLineWidth,\n      clearCanvas: clearCanvas,\n      undo: undo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef,\n      color: color,\n      lineWidth: lineWidth,\n      startDrawing: startDrawing,\n      draw: draw,\n      stopDrawing: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"03KVv6infjZcWkXyO8iFIi6rrao=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","Canvas","Toolbar","jsxDEV","_jsxDEV","App","_s","canvasRef","color","setColor","lineWidth","setLineWidth","traces","setTraces","isDrawing","setIsDrawing","currentTrace","setCurrentTrace","clearCanvas","canvas","current","context","getContext","clearRect","width","height","loadBackground","img","Image","src","onload","drawImage","startDrawing","event","rect","getBoundingClientRect","startX","clientX","left","startY","clientY","top","strokeStyle","lineCap","beginPath","moveTo","x","y","draw","numSprayDots","fadeFactor","i","offsetX","Math","random","offsetY","radius","arc","PI","fillStyle","fill","lineTo","stroke","prev","stopDrawing","newTraces","points","undo","length","slice","redrawCanvas","tracesToRedraw","forEach","point","index","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/ciroa/OneDrive/Escritorio/Dibujo-React/my-app/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport Canvas from './components/Canvas';\nimport Toolbar from './components/Toolbar';\nimport './index.css'; // Asegúrate de que este archivo se importe\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState('#000000');\n  const [lineWidth, setLineWidth] = useState(10); // Grosor inicial\n  const [traces, setTraces] = useState([]); // Almacena los trazos dibujados\n  const [isDrawing, setIsDrawing] = useState(false); // Estado para verificar si se está dibujando\n  const [currentTrace, setCurrentTrace] = useState([]); // Almacena el trazo actual\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    loadBackground(); // Cargar la imagen de fondo\n    setTraces([]); // Limpiar el historial de trazos\n  };\n\n  const loadBackground = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.src = '/path/to/background/image.jpg'; // Ruta de la imagen de fondo\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n  };\n\n  const startDrawing = (event) => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const startX = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const startY = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineWidth = lineWidth;\n    context.strokeStyle = color;\n    context.lineCap = 'round';\n    context.beginPath();\n    context.moveTo(startX, startY); // Usa las coordenadas ajustadas\n\n    // Inicializa el trazo actual con su color y grosor\n    setCurrentTrace([{ x: startX, y: startY, color, lineWidth }]);\n  };\n\n  const draw = (event) => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const x = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const y = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    // Simula el efecto spray dibujando múltiples pequeños círculos\n    const numSprayDots = 10; // Número de puntos de spray iniciales\n    const fadeFactor = 0.05; // Factor de desvanecimiento\n\n    for (let i = 0; i < numSprayDots; i++) {\n      const offsetX = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en X\n      const offsetY = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en Y\n      const radius = (lineWidth / 2) * (1 - (i / numSprayDots)); // Radio del círculo que se desvanece\n\n      context.beginPath();\n      context.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2); // Dibuja un círculo\n      context.fillStyle = color; // Establece el color de relleno\n      context.fill();\n    }\n\n    // Dibuja el trazo principal en la posición actual\n    context.lineTo(x, y);\n    context.stroke();\n\n    // Agrega el punto actual al trazo\n    setCurrentTrace((prev) => [...prev, { x, y }]);\n  };\n\n  const stopDrawing = () => {\n    if (isDrawing) {\n      const newTraces = [...traces, { points: currentTrace, color, lineWidth }]; // Agrega el trazo actual al historial\n      setTraces(newTraces); // Actualiza el historial\n      setCurrentTrace([]); // Resetea el trazo actual\n    }\n    setIsDrawing(false);\n  };\n\n  const undo = () => {\n    if (traces.length > 0) {\n      const newTraces = traces.slice(0, -1); // Elimina el último trazo de la pila\n      setTraces(newTraces); // Actualiza el historial\n      redrawCanvas(newTraces); // Redibuja el lienzo\n    }\n  };\n\n  const redrawCanvas = (tracesToRedraw) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo\n    loadBackground(); // Vuelve a cargar la imagen de fondo\n\n    tracesToRedraw.forEach(({ points, color, lineWidth }) => {\n      context.strokeStyle = color; // Establece el color del trazo\n      context.lineWidth = lineWidth; // Establece el grosor del trazo\n      context.beginPath(); // Comienza un nuevo trazo\n      context.moveTo(points[0].x, points[0].y); // Comienza desde el primer punto\n\n      // Redibuja cada trazo\n      points.forEach((point, index) => {\n        context.lineTo(point.x, point.y);\n        if (index % 2 === 0) {\n          // Dibuja spray cada ciertos puntos\n          const numSprayDots = 10; // Número de puntos de spray\n          for (let i = 0; i < numSprayDots; i++) {\n            const offsetX = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en X\n            const offsetY = (Math.random() - 0.5) * lineWidth; // Desplazamiento aleatorio en Y\n            const radius = (lineWidth / 2) * (1 - (i / numSprayDots)); // Radio del círculo que se desvanece\n\n            context.beginPath();\n            context.arc(point.x + offsetX, point.y + offsetY, radius, 0, Math.PI * 2); // Dibuja un círculo\n            context.fillStyle = color; // Establece el color de relleno\n            context.fill();\n          }\n        }\n      });\n      context.stroke(); // Finaliza el trazo\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Toolbar setColor={setColor} setLineWidth={setLineWidth} clearCanvas={clearCanvas} undo={undo} />\n      <Canvas\n        ref={canvasRef}\n        color={color}\n        lineWidth={lineWidth}\n        startDrawing={startDrawing}\n        draw={draw}\n        stopDrawing={stopDrawing}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}