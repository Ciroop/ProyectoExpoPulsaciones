{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ciroa\\\\OneDrive\\\\Escritorio\\\\Dibujo-React\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Canvas from './components/Canvas';\nimport Toolbar from './components/Toolbar';\nimport './index.css'; // Asegúrate de que este archivo se importe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState('#000000');\n  const [lineWidth, setLineWidth] = useState(10); // Grosor inicial\n  const [traces, setTraces] = useState([]); // Almacena los trazos dibujados\n  const [isDrawing, setIsDrawing] = useState(false); // Estado para verificar si se está dibujando\n  const [currentTrace, setCurrentTrace] = useState({\n    points: [],\n    sprays: [],\n    color,\n    lineWidth\n  }); // Almacena el trazo actual\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    loadBackground(); // Cargar la imagen de fondo\n    setTraces([]); // Limpiar el historial de trazos\n  };\n  const loadBackground = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.src = '/path/to/background/image.jpg'; // Ruta de la imagen de fondo\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n  };\n  const startDrawing = event => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const startX = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const startY = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineWidth = lineWidth;\n    context.strokeStyle = color;\n    context.lineCap = 'round';\n    context.beginPath();\n    context.moveTo(startX, startY); // Usa las coordenadas ajustadas\n\n    // Inicializa el trazo actual con su color y grosor\n    setCurrentTrace({\n      points: [{\n        x: startX,\n        y: startY\n      }],\n      sprays: [],\n      color,\n      lineWidth\n    });\n  };\n  const draw = event => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const x = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const y = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    // Trazo continuo\n    context.lineTo(x, y);\n    context.stroke();\n\n    // Generar spray\n    const sprays = generateSpray(x, y, lineWidth); // Genera las gotas de spray\n\n    // Dibuja el spray en la posición actual\n    sprays.forEach(({\n      offsetX,\n      offsetY,\n      radius\n    }) => {\n      context.beginPath();\n      context.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2);\n      context.fillStyle = color;\n      context.fill();\n    });\n\n    // Agrega el punto actual al trazo y las gotas de spray\n    setCurrentTrace(prev => ({\n      ...prev,\n      points: [...prev.points, {\n        x,\n        y\n      }],\n      sprays: [...prev.sprays, sprays] // Almacena las gotas de spray\n    }));\n  };\n  const generateSpray = (x, y, lineWidth) => {\n    const numSprayDots = 8; // Reducir el número de puntos para una cobertura más sutil\n    const sprays = [];\n    for (let i = 0; i < numSprayDots; i++) {\n      const offsetX = (Math.random() - 0.5) * (lineWidth / 2); // Desplazamiento menor en X\n      const offsetY = (Math.random() - 0.5) * (lineWidth / 2); // Desplazamiento menor en Y\n      const radius = lineWidth / 6; // Radio más pequeño para un efecto más sutil\n\n      sprays.push({\n        offsetX,\n        offsetY,\n        radius\n      });\n    }\n    return sprays;\n  };\n  const stopDrawing = () => {\n    if (isDrawing) {\n      const newTraces = [...traces, currentTrace]; // Agrega el trazo actual al historial\n      setTraces(newTraces); // Actualiza el historial\n      setCurrentTrace({\n        points: [],\n        sprays: [],\n        color,\n        lineWidth\n      }); // Resetea el trazo actual\n    }\n    setIsDrawing(false);\n  };\n  const undo = () => {\n    if (traces.length > 0) {\n      const newTraces = traces.slice(0, -1); // Elimina el último trazo de la pila\n      setTraces(newTraces); // Actualiza el historial\n      redrawCanvas(newTraces); // Redibuja el lienzo\n    }\n  };\n  const redrawCanvas = tracesToRedraw => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo\n    loadBackground(); // Vuelve a cargar la imagen de fondo\n\n    tracesToRedraw.forEach(({\n      points,\n      sprays,\n      color,\n      lineWidth\n    }) => {\n      context.strokeStyle = color; // Establece el color del trazo\n      context.lineWidth = lineWidth; // Establece el grosor del trazo\n      context.beginPath(); // Comienza un nuevo trazo\n      context.moveTo(points[0].x, points[0].y); // Comienza desde el primer punto\n\n      // Redibuja el trazo\n      points.forEach((point, index) => {\n        context.lineTo(point.x, point.y);\n        context.stroke(); // Dibuja el trazo\n\n        // Dibuja las gotas de spray previamente almacenadas\n        if (sprays[index]) {\n          // Verifica que sprays[index] existe\n          sprays[index].forEach(({\n            offsetX,\n            offsetY,\n            radius\n          }) => {\n            context.beginPath();\n            context.arc(point.x + offsetX, point.y + offsetY, radius, 0, Math.PI * 2);\n            context.fillStyle = color;\n            context.fill();\n          });\n        }\n      });\n      context.stroke(); // Finaliza el trazo\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      setColor: setColor,\n      setLineWidth: setLineWidth,\n      clearCanvas: clearCanvas,\n      undo: undo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef,\n      color: color,\n      lineWidth: lineWidth,\n      startDrawing: startDrawing,\n      draw: draw,\n      stopDrawing: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"gf7ejXZVJz2p1aj721lwUt1Voeo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","Canvas","Toolbar","jsxDEV","_jsxDEV","App","_s","canvasRef","color","setColor","lineWidth","setLineWidth","traces","setTraces","isDrawing","setIsDrawing","currentTrace","setCurrentTrace","points","sprays","clearCanvas","canvas","current","context","getContext","clearRect","width","height","loadBackground","img","Image","src","onload","drawImage","startDrawing","event","rect","getBoundingClientRect","startX","clientX","left","startY","clientY","top","strokeStyle","lineCap","beginPath","moveTo","x","y","draw","lineTo","stroke","generateSpray","forEach","offsetX","offsetY","radius","arc","Math","PI","fillStyle","fill","prev","numSprayDots","i","random","push","stopDrawing","newTraces","undo","length","slice","redrawCanvas","tracesToRedraw","point","index","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/ciroa/OneDrive/Escritorio/Dibujo-React/my-app/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport Canvas from './components/Canvas';\nimport Toolbar from './components/Toolbar';\nimport './index.css'; // Asegúrate de que este archivo se importe\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState('#000000');\n  const [lineWidth, setLineWidth] = useState(10); // Grosor inicial\n  const [traces, setTraces] = useState([]); // Almacena los trazos dibujados\n  const [isDrawing, setIsDrawing] = useState(false); // Estado para verificar si se está dibujando\n  const [currentTrace, setCurrentTrace] = useState({ points: [], sprays: [], color, lineWidth }); // Almacena el trazo actual\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    loadBackground(); // Cargar la imagen de fondo\n    setTraces([]); // Limpiar el historial de trazos\n  };\n\n  const loadBackground = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.src = '/path/to/background/image.jpg'; // Ruta de la imagen de fondo\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n  };\n\n  const startDrawing = (event) => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const startX = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const startY = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineWidth = lineWidth;\n    context.strokeStyle = color;\n    context.lineCap = 'round';\n    context.beginPath();\n    context.moveTo(startX, startY); // Usa las coordenadas ajustadas\n\n    // Inicializa el trazo actual con su color y grosor\n    setCurrentTrace({ points: [{ x: startX, y: startY }], sprays: [], color, lineWidth });\n  };\n\n  const draw = (event) => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const x = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const y = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    // Trazo continuo\n    context.lineTo(x, y);\n    context.stroke();\n\n    // Generar spray\n    const sprays = generateSpray(x, y, lineWidth); // Genera las gotas de spray\n\n    // Dibuja el spray en la posición actual\n    sprays.forEach(({ offsetX, offsetY, radius }) => {\n      context.beginPath();\n      context.arc(x + offsetX, y + offsetY, radius, 0, Math.PI * 2);\n      context.fillStyle = color;\n      context.fill();\n    });\n\n    // Agrega el punto actual al trazo y las gotas de spray\n    setCurrentTrace((prev) => ({\n      ...prev,\n      points: [...prev.points, { x, y }],\n      sprays: [...prev.sprays, sprays], // Almacena las gotas de spray\n    }));\n  };\n\n  const generateSpray = (x, y, lineWidth) => {\n    const numSprayDots = 8; // Reducir el número de puntos para una cobertura más sutil\n    const sprays = [];\n\n    for (let i = 0; i < numSprayDots; i++) {\n      const offsetX = (Math.random() - 0.5) * (lineWidth / 2); // Desplazamiento menor en X\n      const offsetY = (Math.random() - 0.5) * (lineWidth / 2); // Desplazamiento menor en Y\n      const radius = (lineWidth / 6); // Radio más pequeño para un efecto más sutil\n\n      sprays.push({ offsetX, offsetY, radius });\n    }\n\n    return sprays;\n  };\n\n  const stopDrawing = () => {\n    if (isDrawing) {\n      const newTraces = [...traces, currentTrace]; // Agrega el trazo actual al historial\n      setTraces(newTraces); // Actualiza el historial\n      setCurrentTrace({ points: [], sprays: [], color, lineWidth }); // Resetea el trazo actual\n    }\n    setIsDrawing(false);\n  };\n\n  const undo = () => {\n    if (traces.length > 0) {\n      const newTraces = traces.slice(0, -1); // Elimina el último trazo de la pila\n      setTraces(newTraces); // Actualiza el historial\n      redrawCanvas(newTraces); // Redibuja el lienzo\n    }\n  };\n\n  const redrawCanvas = (tracesToRedraw) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo\n    loadBackground(); // Vuelve a cargar la imagen de fondo\n\n    tracesToRedraw.forEach(({ points, sprays, color, lineWidth }) => {\n      context.strokeStyle = color; // Establece el color del trazo\n      context.lineWidth = lineWidth; // Establece el grosor del trazo\n      context.beginPath(); // Comienza un nuevo trazo\n      context.moveTo(points[0].x, points[0].y); // Comienza desde el primer punto\n\n      // Redibuja el trazo\n      points.forEach((point, index) => {\n        context.lineTo(point.x, point.y);\n        context.stroke(); // Dibuja el trazo\n\n        // Dibuja las gotas de spray previamente almacenadas\n        if (sprays[index]) { // Verifica que sprays[index] existe\n          sprays[index].forEach(({ offsetX, offsetY, radius }) => {\n            context.beginPath();\n            context.arc(point.x + offsetX, point.y + offsetY, radius, 0, Math.PI * 2);\n            context.fillStyle = color;\n            context.fill();\n          });\n        }\n      });\n\n      context.stroke(); // Finaliza el trazo\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Toolbar setColor={setColor} setLineWidth={setLineWidth} clearCanvas={clearCanvas} undo={undo} />\n      <Canvas\n        ref={canvasRef}\n        color={color}\n        lineWidth={lineWidth}\n        startDrawing={startDrawing}\n        draw={draw}\n        stopDrawing={stopDrawing}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}