{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ciroa\\\\OneDrive\\\\Escritorio\\\\Dibujo-React\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport Canvas from './components/Canvas';\nimport Toolbar from './components/Toolbar';\nimport './index.css'; // Asegúrate de que este archivo se importe\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState('#000000');\n  const [lineWidth, setLineWidth] = useState(5);\n  const [traces, setTraces] = useState([]); // Almacena los trazos dibujados\n  const [isDrawing, setIsDrawing] = useState(false); // Estado para verificar si se está dibujando\n  const [currentTrace, setCurrentTrace] = useState([]); // Almacena el trazo actual\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    loadBackground(); // Cargar la imagen de fondo\n    setTraces([]); // Limpiar el historial de trazos\n  };\n  const loadBackground = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.src = '/path/to/background/image.jpg'; // Ruta de la imagen de fondo\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n  };\n  const startDrawing = event => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const startX = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const startY = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineWidth = lineWidth;\n    context.strokeStyle = color;\n    context.beginPath();\n    context.moveTo(startX, startY); // Usa las coordenadas ajustadas\n\n    // Inicializa el trazo actual\n    setCurrentTrace([{\n      x: startX,\n      y: startY\n    }]);\n  };\n  const draw = event => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const x = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const y = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineTo(x, y); // Usa las coordenadas ajustadas\n    context.stroke();\n\n    // Agrega el punto actual al trazo\n    setCurrentTrace(prev => [...prev, {\n      x,\n      y\n    }]);\n  };\n  const stopDrawing = () => {\n    if (isDrawing) {\n      const newTraces = [...traces, currentTrace]; // Agrega el trazo actual al historial\n      setTraces(newTraces); // Actualiza el historial\n      setCurrentTrace([]); // Resetea el trazo actual\n    }\n    setIsDrawing(false);\n  };\n  const undo = () => {\n    if (traces.length > 0) {\n      const newTraces = traces.slice(0, -1); // Elimina el último trazo de la pila\n      setTraces(newTraces); // Actualiza el historial\n      redrawCanvas(newTraces); // Redibuja el lienzo\n    }\n  };\n  const redrawCanvas = tracesToRedraw => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo\n    loadBackground(); // Vuelve a cargar la imagen de fondo\n\n    tracesToRedraw.forEach(trace => {\n      context.beginPath();\n      context.moveTo(trace[0].x, trace[0].y);\n      trace.forEach(point => {\n        context.lineTo(point.x, point.y);\n      });\n      context.stroke();\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n      setColor: setColor,\n      setLineWidth: setLineWidth,\n      clearCanvas: clearCanvas,\n      undo: undo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      ref: canvasRef,\n      color: color,\n      lineWidth: lineWidth,\n      startDrawing: startDrawing,\n      draw: draw,\n      stopDrawing: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"YjrWee5JQcyjaQx5zwnbv7S9zGc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useRef","useState","Canvas","Toolbar","jsxDEV","_jsxDEV","App","_s","canvasRef","color","setColor","lineWidth","setLineWidth","traces","setTraces","isDrawing","setIsDrawing","currentTrace","setCurrentTrace","clearCanvas","canvas","current","context","getContext","clearRect","width","height","loadBackground","img","Image","src","onload","drawImage","startDrawing","event","rect","getBoundingClientRect","startX","clientX","left","startY","clientY","top","strokeStyle","beginPath","moveTo","x","y","draw","lineTo","stroke","prev","stopDrawing","newTraces","undo","length","slice","redrawCanvas","tracesToRedraw","forEach","trace","point","style","display","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","_c","$RefreshReg$"],"sources":["C:/Users/ciroa/OneDrive/Escritorio/Dibujo-React/my-app/src/App.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport Canvas from './components/Canvas';\nimport Toolbar from './components/Toolbar';\nimport './index.css'; // Asegúrate de que este archivo se importe\n\nconst App = () => {\n  const canvasRef = useRef(null);\n  const [color, setColor] = useState('#000000');\n  const [lineWidth, setLineWidth] = useState(5);\n  const [traces, setTraces] = useState([]); // Almacena los trazos dibujados\n  const [isDrawing, setIsDrawing] = useState(false); // Estado para verificar si se está dibujando\n  const [currentTrace, setCurrentTrace] = useState([]); // Almacena el trazo actual\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    loadBackground(); // Cargar la imagen de fondo\n    setTraces([]); // Limpiar el historial de trazos\n  };\n\n  const loadBackground = () => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const img = new Image();\n    img.src = '/path/to/background/image.jpg'; // Ruta de la imagen de fondo\n    img.onload = () => {\n      context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    };\n  };\n\n  const startDrawing = (event) => {\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const startX = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const startY = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineWidth = lineWidth;\n    context.strokeStyle = color;\n    context.beginPath();\n    context.moveTo(startX, startY); // Usa las coordenadas ajustadas\n\n    // Inicializa el trazo actual\n    setCurrentTrace([{ x: startX, y: startY }]);\n  };\n\n  const draw = (event) => {\n    if (!isDrawing) return;\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    const rect = canvas.getBoundingClientRect(); // Obtiene el rectángulo del lienzo\n    const x = event.clientX - rect.left; // Calcula la posición X relativa al lienzo\n    const y = event.clientY - rect.top; // Calcula la posición Y relativa al lienzo\n\n    context.lineTo(x, y); // Usa las coordenadas ajustadas\n    context.stroke();\n\n    // Agrega el punto actual al trazo\n    setCurrentTrace((prev) => [...prev, { x, y }]);\n  };\n\n  const stopDrawing = () => {\n    if (isDrawing) {\n      const newTraces = [...traces, currentTrace]; // Agrega el trazo actual al historial\n      setTraces(newTraces); // Actualiza el historial\n      setCurrentTrace([]); // Resetea el trazo actual\n    }\n    setIsDrawing(false);\n  };\n\n  const undo = () => {\n    if (traces.length > 0) {\n      const newTraces = traces.slice(0, -1); // Elimina el último trazo de la pila\n      setTraces(newTraces); // Actualiza el historial\n      redrawCanvas(newTraces); // Redibuja el lienzo\n    }\n  };\n\n  const redrawCanvas = (tracesToRedraw) => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    \n    context.clearRect(0, 0, canvas.width, canvas.height); // Limpia el lienzo\n    loadBackground(); // Vuelve a cargar la imagen de fondo\n\n    tracesToRedraw.forEach((trace) => {\n      context.beginPath();\n      context.moveTo(trace[0].x, trace[0].y);\n      trace.forEach((point) => {\n        context.lineTo(point.x, point.y);\n      });\n      context.stroke();\n    });\n  };\n\n  return (\n    <div style={{ display: 'flex', height: '100vh' }}>\n      <Toolbar setColor={setColor} setLineWidth={setLineWidth} clearCanvas={clearCanvas} undo={undo} />\n      <Canvas\n        ref={canvasRef}\n        color={color}\n        lineWidth={lineWidth}\n        startDrawing={startDrawing}\n        draw={draw}\n        stopDrawing={stopDrawing}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}